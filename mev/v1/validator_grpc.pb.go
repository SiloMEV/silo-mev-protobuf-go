// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/validator.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BundleProvider_GetBundles_FullMethodName = "/seiprotocol.seichain.mev.BundleProvider/GetBundles"
)

// BundleProviderClient is the client API for BundleProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BundleProviderClient interface {
	GetBundles(ctx context.Context, in *GetBundlesRequest, opts ...grpc.CallOption) (*GetBundlesResponse, error)
}

type bundleProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewBundleProviderClient(cc grpc.ClientConnInterface) BundleProviderClient {
	return &bundleProviderClient{cc}
}

func (c *bundleProviderClient) GetBundles(ctx context.Context, in *GetBundlesRequest, opts ...grpc.CallOption) (*GetBundlesResponse, error) {
	out := new(GetBundlesResponse)
	err := c.cc.Invoke(ctx, BundleProvider_GetBundles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BundleProviderServer is the server API for BundleProvider service.
// All implementations must embed UnimplementedBundleProviderServer
// for forward compatibility
type BundleProviderServer interface {
	GetBundles(context.Context, *GetBundlesRequest) (*GetBundlesResponse, error)
	mustEmbedUnimplementedBundleProviderServer()
}

// UnimplementedBundleProviderServer must be embedded to have forward compatible implementations.
type UnimplementedBundleProviderServer struct {
}

func (UnimplementedBundleProviderServer) GetBundles(context.Context, *GetBundlesRequest) (*GetBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBundles not implemented")
}
func (UnimplementedBundleProviderServer) mustEmbedUnimplementedBundleProviderServer() {}

// UnsafeBundleProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BundleProviderServer will
// result in compilation errors.
type UnsafeBundleProviderServer interface {
	mustEmbedUnimplementedBundleProviderServer()
}

func RegisterBundleProviderServer(s grpc.ServiceRegistrar, srv BundleProviderServer) {
	s.RegisterService(&BundleProvider_ServiceDesc, srv)
}

func _BundleProvider_GetBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BundleProviderServer).GetBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BundleProvider_GetBundles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BundleProviderServer).GetBundles(ctx, req.(*GetBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BundleProvider_ServiceDesc is the grpc.ServiceDesc for BundleProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BundleProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seiprotocol.seichain.mev.BundleProvider",
	HandlerType: (*BundleProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBundles",
			Handler:    _BundleProvider_GetBundles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/validator.proto",
}
