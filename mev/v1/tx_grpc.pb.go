// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/tx.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MEVServer_SubmitBundle_FullMethodName = "/seiprotocol.seichain.mev.MEVServer/SubmitBundle"
)

// MEVServerClient is the client API for MEVServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MEVServerClient interface {
	// SubmitBundle defines a method for submitting a bundle of transactions
	SubmitBundle(ctx context.Context, in *SubmitBundleRequest, opts ...grpc.CallOption) (*SubmitBundleResponse, error)
}

type mEVServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMEVServerClient(cc grpc.ClientConnInterface) MEVServerClient {
	return &mEVServerClient{cc}
}

func (c *mEVServerClient) SubmitBundle(ctx context.Context, in *SubmitBundleRequest, opts ...grpc.CallOption) (*SubmitBundleResponse, error) {
	out := new(SubmitBundleResponse)
	err := c.cc.Invoke(ctx, MEVServer_SubmitBundle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MEVServerServer is the server API for MEVServer service.
// All implementations must embed UnimplementedMEVServerServer
// for forward compatibility
type MEVServerServer interface {
	// SubmitBundle defines a method for submitting a bundle of transactions
	SubmitBundle(context.Context, *SubmitBundleRequest) (*SubmitBundleResponse, error)
	mustEmbedUnimplementedMEVServerServer()
}

// UnimplementedMEVServerServer must be embedded to have forward compatible implementations.
type UnimplementedMEVServerServer struct {
}

func (UnimplementedMEVServerServer) SubmitBundle(context.Context, *SubmitBundleRequest) (*SubmitBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBundle not implemented")
}
func (UnimplementedMEVServerServer) mustEmbedUnimplementedMEVServerServer() {}

// UnsafeMEVServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MEVServerServer will
// result in compilation errors.
type UnsafeMEVServerServer interface {
	mustEmbedUnimplementedMEVServerServer()
}

func RegisterMEVServerServer(s grpc.ServiceRegistrar, srv MEVServerServer) {
	s.RegisterService(&MEVServer_ServiceDesc, srv)
}

func _MEVServer_SubmitBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MEVServerServer).SubmitBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MEVServer_SubmitBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MEVServerServer).SubmitBundle(ctx, req.(*SubmitBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MEVServer_ServiceDesc is the grpc.ServiceDesc for MEVServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MEVServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seiprotocol.seichain.mev.MEVServer",
	HandlerType: (*MEVServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBundle",
			Handler:    _MEVServer_SubmitBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/tx.proto",
}
